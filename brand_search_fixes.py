"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –ø–æ –º–∞—Ä–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ–∫—É–ø–∫–∏ –æ–¥–Ω–æ–π —â–µ—Ç–∫–∏.
"""

# 1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã /brand –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ —Ç–æ–ª—å–∫–æ –º–∞—Ä–∫–∏

# –í handlers/command_handler.py:

"""
async def brand(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    '''
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /brand –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –º–∞—Ä–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    '''
    user = update.effective_user
    log_user_action(user.id, user.username, "BRAND_SEARCH")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
    if 'waiting_for_brand' in context.user_data:
        del context.user_data['waiting_for_brand']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    if context.args and len(context.args) > 0:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –∫–∞–∫ –∑–∞–ø—Ä–æ—Å
        brand_query = ' '.join(context.args)
        await self._handle_brand_search(update, context, brand_query)
    else:
        # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –º–∞—Ä–∫—É
        await update.message.reply_text(
            "üöó <b>–ü–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>BMW</code> –∏–ª–∏ <code>Toyota</code>",
            parse_mode='HTML'
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –º–∞—Ä–∫–∏
        context.user_data['waiting_for_brand'] = True
"""

# 2. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ handlers/message_handler.py –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ —Ç–æ–ª—å–∫–æ –º–∞—Ä–∫–∏:

"""
async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    '''
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    '''
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –º–∞—Ä–∫–∏
    if context.user_data.get('waiting_for_brand'):
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
        del context.user_data['waiting_for_brand']
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∫–∞–∫ –ø–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ
        await self.handle_brand_search(update, context, update.message.text)
        return
        
    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    user = update.effective_user
    self.user_manager.register_user(user.id)
    text = update.message.text.strip()
    context.user_data['user_query_message_id'] = update.message.message_id
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log_user_action(user.id, user.username, "SEARCH", text)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    await update.message.chat.send_action("typing")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
    synonyms = self.synonym_manager.get_synonyms()
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    def log_debug(msg: str) -> None:
        logger.info(f"SEARCH_DEBUG | User: {user.id} | Query: {text!r} | {msg}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Å—Ç–æ –º–∞—Ä–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–±–µ–∑ –º–æ–¥–µ–ª–∏)
    # –≠—Ç–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫–æ—Ä–æ—Ç–∫–∏–π (1-2 —Å–ª–æ–≤–∞) –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä, 
    # —Ç–æ —ç—Ç–æ, –≤–µ—Ä–æ—è—Ç–Ω–æ, —Ç–æ–ª—å–∫–æ –º–∞—Ä–∫–∞
    words = text.split()
    contains_digits = any(char.isdigit() for char in text)
    
    if len(words) <= 2 and not contains_digits:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –º–∞—Ä–∫–µ
        brand_matches = self.db.cars_df[self.db.cars_df['brand'].str.lower() == text.lower()]
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –º–∞—Ä–∫–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ
        if not brand_matches.empty:
            await self.handle_brand_search(update, context, text)
            return
    
    # –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –æ–±—ã—á–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    result = self.search_engine.search(text, synonyms, log_debug=log_debug)
    matches = result['matches']
    similar = result['similar']
    
    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –º–µ—Ç–æ–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    # ...
"""

# 3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ–∫—É–ø–∫–∏ –æ–¥–Ω–æ–π —â–µ—Ç–∫–∏ –≤ handlers/callback_handler.py:

"""
async def _handle_single_wiper_selection(self, query: Update.callback_query, context: ContextTypes.DEFAULT_TYPE) -> None:
    '''
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ–¥–Ω–æ–π —â–µ—Ç–∫–∏.
    
    Args:
        query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    '''
    type_id = query.data.replace("single_", "")
    store = self.user_manager.get_callback_data(type_id)
    
    if not store:
        await query.message.edit_text(
            text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —â–µ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–æ—Ä–æ–Ω—ã (–≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è/–ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∞—è)
    buttons = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∏ –ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω
    driver_size = store.get('driver_size')
    pass_size = store.get('pass_size')
    
    if driver_size:
        buttons.append([InlineKeyboardButton(f"üë®‚Äç‚úàÔ∏è –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è ({driver_size} –º–º)", 
                                           callback_data=f"single_left_{type_id}")])
    
    if pass_size:
        buttons.append([InlineKeyboardButton(f"üë®‚Äçüë©‚Äçüëß –ü–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∞—è ({pass_size} –º–º)", 
                                           callback_data=f"single_right_{type_id}")])
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"type_{type_id}")])
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
    car_rows = self.db.cars_df[
        (self.db.cars_df['brand'] == store.get('brand', '')) &
        (self.db.cars_df['model'] == store.get('model', '')) &
        (self.db.cars_df['years'] == store.get('years', ''))
    ]
    
    car_info = ""
    if not car_rows.empty:
        car_info = self.db.get_car_info(car_rows.iloc[0])
    
    frame = store.get('gy_frame', '')
    gy_type = store.get('gy_type', '')
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–∞ —â–µ—Ç–∫–∏
    type_desc = ""
    if self.db.types_desc_df is not None:
        type_rows = self.db.types_desc_df[self.db.types_desc_df['gy_type'] == gy_type]
        if not type_rows.empty:
            desc = type_rows.iloc[0].get('description', '')
            if desc:
                type_desc = f"\n\n<i>{desc}</i>"
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = (
        f"{car_info}\n"
        f"<b>–í—ã–±—Ä–∞–Ω —Ç–∏–ø —â—ë—Ç–∫–∏:</b> <i>{frame} {gy_type}</i>{type_desc}\n\n"
        f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–¥–Ω–æ–π —â—ë—Ç–∫–∏:</b>"
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await query.message.edit_text(
        message,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='HTML'
    )

async def _handle_side_selection(self, query: Update.callback_query, context: ContextTypes.DEFAULT_TYPE) -> None:
    '''
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–æ—Ä–æ–Ω—ã –¥–ª—è –æ–¥–Ω–æ–π —â–µ—Ç–∫–∏.
    
    Args:
        query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    '''
    data = query.data
    type_id = data.replace("single_", "")
    store = self.user_manager.get_callback_data(type_id)
    
    if not store:
        await query.message.edit_text(
            text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —â–µ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ."
        )
        return
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
    if data.startswith("single_left_") or data.startswith("single_right_"):
        await self._handle_single_wiper_selection(query, context)
    else:
        # –≠—Ç–æ –ø–µ—Ä–≤–∏—á–Ω—ã–π –≤—ã–±–æ—Ä "–ö—É–ø–∏—Ç—å –æ–¥–Ω—É —â–µ—Ç–∫—É"
        await self._handle_single_wiper_selection(query, context)
"""

# 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã:

"""
async def _handle_single_wiper_side_selection(self, query: Update.callback_query, context: ContextTypes.DEFAULT_TYPE) -> None:
    '''
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –¥–ª—è –æ–¥–Ω–æ–π —â–µ—Ç–∫–∏.
    
    Args:
        query: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    '''
    data = query.data
    is_left = data.startswith("single_left_")
    type_id = data.replace("single_left_", "").replace("single_right_", "")
    store = self.user_manager.get_callback_data(type_id)
    
    if not store:
        await query.message.edit_text(
            text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —â–µ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ."
        )
        return
    
    frame = store.get('gy_frame', '')
    gy_type = store.get('gy_type', '')
    mount = store.get('mount', '')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
    size = store.get('driver_size') if is_left else store.get('pass_size')
    side_name = "–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è" if is_left else "–ü–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∞—è"
    
    if not size:
        await query.message.edit_text(
            text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–∑–º–µ—Ä –¥–ª—è {side_name.lower()} —Å—Ç–æ—Ä–æ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É."
        )
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ —â–µ—Ç–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
    ozon_url, wb_url = self.db.get_single_wiper_links(frame, gy_type, mount, size)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
    car_rows = self.db.cars_df[
        (self.db.cars_df['brand'] == store.get('brand', '')) &
        (self.db.cars_df['model'] == store.get('model', '')) &
        (self.db.cars_df['years'] == store.get('years', ''))
    ]
    
    car_info = ""
    if not car_rows.empty:
        car_info = self.db.get_car_info(car_rows.iloc[0])
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–∞ —â–µ—Ç–∫–∏
    type_desc = ""
    if self.db.types_desc_df is not None:
        type_rows = self.db.types_desc_df[self.db.types_desc_df['gy_type'] == gy_type]
        if not type_rows.empty:
            desc = type_rows.iloc[0].get('description', '')
            if desc:
                type_desc = f"\n\n<i>{desc}</i>"
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = (
        f"{car_info}\n"
        f"<b>–í—ã–±—Ä–∞–Ω —Ç–∏–ø —â—ë—Ç–∫–∏:</b> <i>{frame} {gy_type}</i>{type_desc}\n\n"
        f"<b>{side_name} —â—ë—Ç–∫–∞ ({size} –º–º)</b>\n\n"
        f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏:</b>"
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    buttons = []
    
    if ozon_url and isinstance(ozon_url, str) and ozon_url.startswith("http"):
        buttons.append([InlineKeyboardButton("üåê –ö—É–ø–∏—Ç—å –Ω–∞ Ozon", url=ozon_url)])
    
    if wb_url and isinstance(wb_url, str) and wb_url.startswith("http"):
        buttons.append([InlineKeyboardButton("üü£ –ö—É–ø–∏—Ç—å –Ω–∞ Wildberries", url=wb_url)])
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"single_{type_id}")])
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await query.message.edit_text(
        message,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='HTML'
    )
"""

# 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ handle_callback_query –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤:

"""
async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    query = update.callback_query
    user = query.from_user
    
    try:
        await query.answer()
        
        if not hasattr(query, 'data') or not query.data:
            return
        
        data = query.data
        log_user_action(user.id, user.username, "BUTTON_CLICK", data)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        if data.startswith("model_"):
            await self._handle_model_selection(query, context)
        elif data.startswith("frame_"):
            await self._handle_frame_selection(query, context)
        elif data.startswith("type_"):
            await self._handle_type_selection(query, context)
        elif data.startswith("kit_"):
            await self._handle_kit_selection(query, context)
        elif data.startswith("single_left_") or data.startswith("single_right_"):
            await self._handle_single_wiper_side_selection(query, context)
        elif data.startswith("single_"):
            await self._handle_single_wiper_selection(query, context)
        elif data == "new_search":
            await self._handle_new_search(query, context)
        elif data.startswith("back_to_frames_"):
            await self._handle_back_to_frames(query, context)
        elif data.startswith("back_to_types_"):
            await self._handle_back_to_types(query, context)
        elif data.startswith("add_favorite_"):
            await self._handle_add_favorite(query, context)
        elif data.startswith("view_favorites"):
            await self._handle_view_favorites(query, context)
        elif data.startswith("remove_favorite_"):
            await self._handle_remove_favorite(query, context)
        elif data.startswith("page_"):
            await self._handle_pagination(query, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: {str(e)}")
        log_user_action(user.id, user.username, "BUTTON_ERROR", getattr(query, "data", ""), str(e))
        try:
            await query.edit_message_text(
                text="üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑‚ú®"
            )
        except Exception:
            pass
"""

# 6. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –≤ Database –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–¥–Ω—É —â–µ—Ç–∫—É:

"""
def get_single_wiper_links(self, frame: str, gy_type: str, mount: str, size: int) -> Tuple[Optional[str], Optional[str]]:
    '''
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–¥–Ω—É —â–µ—Ç–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.
    
    Args:
        frame: –¢–∏–ø –∫–æ—Ä–ø—É—Å–∞ —â–µ—Ç–∫–∏
        gy_type: –í–∏–¥ —â–µ—Ç–∫–∏
        mount: –¢–∏–ø –∫—Ä–µ–ø–ª–µ–Ω–∏—è
        size: –†–∞–∑–º–µ—Ä —â–µ—Ç–∫–∏
        
    Returns:
        Tuple[Optional[str], Optional[str]]: –°—Å—ã–ª–∫–∏ –Ω–∞ Ozon –∏ Wildberries
    '''
    if self.wipers_df is None:
        return None, None
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∫–æ—Ä–ø—É—Å–∞, –≤–∏–¥—É —â–µ—Ç–∫–∏ –∏ —Ä–∞–∑–º–µ—Ä—É
    wipers = self.wipers_df[
        (self.wipers_df['gy_frame'] == frame) &
        (self.wipers_df['gy_type'] == gy_type) &
        (self.wipers_df['size'] == size)
    ]
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É, –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ä–∞–∑–º–µ—Ä
    if wipers.empty and isinstance(size, (int, float)):
        size_int = int(size)
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —Ä–∞–∑–º–µ—Ä (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±10 –º–º)
        for delta in range(1, 11):
            wipers_plus = self.wipers_df[
                (self.wipers_df['gy_frame'] == frame) &
                (self.wipers_df['gy_type'] == gy_type) &
                (self.wipers_df['size'] == size_int + delta)
            ]
            wipers_minus = self.wipers_df[
                (self.wipers_df['gy_frame'] == frame) &
                (self.wipers_df['gy_type'] == gy_type) &
                (self.wipers_df['size'] == size_int - delta)
            ]
            
            if not wipers_plus.empty:
                wipers = wipers_plus
                break
            elif not wipers_minus.empty:
                wipers = wipers_minus
                break
    
    if wipers.empty:
        return None, None
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
    ozon_url = None
    wb_url = None
    
    for _, wiper in wipers.iterrows():
        if pd.notna(wiper.get('ozon_url')) and not ozon_url:
            ozon_url = wiper['ozon_url']
        if pd.notna(wiper.get('wb_url')) and not wb_url:
            wb_url = wiper['wb_url']
        
        if ozon_url and wb_url:
            break
    
    return ozon_url, wb_url
"""
